name: NATS testsuite
vars:
  url: 'nats://localhost:4222'
  baseSubject: "nats.test"
  message: '{"message": "hello world"}'

testcases:

  - name: NATS publish testcase
    steps:
      - type: nats
        url: "{{.url}}"
        command: publish
        subject: "{{.baseSubject}}.publish"
        payload: '{{.message}}'
        headers:
          timestamp:
            - "{{.venom.timestamp}}"

  - name: NATS subscribe Jetstream consumer testcase
    steps:
    - type: exec
      script: |
        nats stream create TEST --subjects "nats.test.js.>" --defaults

    - type: exec
      script: |
        nats pub "{{.baseSubject}}.js.hello" '{{.message}}'
        nats pub --count 3 "{{.baseSubject}}.js.world" '{{.message}}'
    
    - type: nats
      command: subscribe
      subject: "{{.baseSubject}}.>"
      messageLimit: 2
      deadline: 10
      jetstream:
        enabled: true
        stream: TEST
        filterSubjects:
          - "{{.baseSubject}}.js.hello"
          - "{{.baseSubject}}.js.world"
      assertions:
        - result.error ShouldBeEmpty
        - result.messages.__Len__ ShouldEqual 2

    - type: exec
      script: |
        nats stream rm TEST -f

  - name: NATS subscribe testcase
    steps:
    - type: nats
      command: subscribe
      subject: "{{.baseSubject}}.>"
      messageLimit: 1
      deadline: 10
      assertions:
        - result.error ShouldBeEmpty
        - result.messages.__Len__ ShouldEqual 1

  - name: NATS subscribe testcase with deadline
    steps:
      - type: nats
        url: "{{.url}}"
        command: subscribe
        subject: "{{.baseSubject}}.>"
        messageLimit: 1
        deadline: 1
        assertions:
          - result.error ShouldNotBeEmpty
          - result.error ShouldContainSubstring "timeout reached"

  - name: NATS request/reply testcase
    steps:
      - type: nats
        url: "{{.url}}"
        command: publish
        request: true
        subject: "{{.baseSubject}}.request"
        replySubject: "{{.baseSubject}}.reply"
        payload: '{{.message}}'
        assertions:
          - result.error ShouldBeEmpty
          - result.messages.__Len__ ShouldEqual 1